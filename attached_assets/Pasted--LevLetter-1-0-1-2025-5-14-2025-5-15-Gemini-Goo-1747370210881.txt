# 要件定義書 - LevLetter

**バージョン:** 1.0.1
**作成日:** 2025年5月14日
**最終更新日:** 2025年5月15日
**作成者:** Gemini (Google AI)
**レビュー者:** (ユーザー名)

## 1. はじめに

### 1.1. プロジェクトの背景と目的
近年、働き方の多様化やリモートワークの浸透により、社員同士のコミュニケーションの質と量が変化しています。このような状況下において、社員同士の感謝の気持ちを可視化し、ポジティブなフィードバックを奨励することは、チームワークの向上、エンゲージメントの強化、そして社内コミュニケーション全体の活性化に不可欠です。

本プロジェクトは、レバレジーズ株式会社の社員が日常的に感謝を伝え合い、互いの貢献を認識し合う文化を醸成するためのサンクスカードツール「LevLetter」を開発することを目的とします。LevLetterを通じて、社員が良い行動や協力を自然に称賛し共有できる環境を提供し、特にリモートワーク環境下でも社員間の温かいつながりを維持・強化することを目指します。

### 1.2. プロジェクトの範囲
本プロジェクトの範囲は、サンクスカードツール「LevLetter」のMVP（Minimum Viable Product）開発とします。MVPには以下の主要機能が含まれます。

* ユーザー登録・認証機能（AWS Cognitoを利用し、メール/パスワード認証およびGoogle認証を提供）
* サンクスカード作成・送信機能
* サンクスカード受信・一覧表示機能
* 「いいね」機能（ポイント付与・管理含む）
* 全社（または所属組織内）のカードタイムライン表示
* 基本的なユーザープロフィール機能（表示名編集、ポイント状況確認など）
* 最小限の管理者機能（Cognitoユーザー管理コンソールでのユーザー基本情報管理を想定）
* パスワードリセット機能（Cognito提供機能を利用）
* （カードの編集・削除機能については基本的な方針のみとし、詳細仕様は別途検討）

将来的な拡張機能（高度な分析機能、詳細なロールベースアクセス制御、人事システムとの高度な連携、Slack連携、画像添付、カードカテゴリなど）は、MVPリリース後のフィードバックと評価に基づき、別途計画・開発します。

### 1.3. 対象利用者
レバレジーズ株式会社の全社員を対象とします。

## 2. ビジネス要求

LevLetter導入により、以下のビジネス上の要求に応えることを目指します。

* **感謝の可視化:** 社員同士の感謝の気持ちや称賛を具体的な形で見えるようにする。
* **チームワーク向上:** ポジティブなフィードバックを促進し、チーム内の協力体制や一体感を強化する。
* **エンゲージメント向上:** 社員が自身の貢献を認められ、他者の貢献を認識することで、会社への帰属意識や仕事へのモチベーションを高める。
* **コミュニケーション活性化:** サンクスカードをきっかけとした、部署や役職を超えたコミュニケーションを促進する。
* **ポジティブな企業文化の醸成:** 良い行動や協力的な姿勢を奨励し、称賛し合う文化を社内に根付かせる。
* **リモートワーク環境でのつながり維持:** 物理的に離れていても、感謝を通じて社員間の温かい精神的なつながりを支援する。

## 3. システム要求

### 3.1. システム概要
LevLetterは、Webブラウザおよびモバイルデバイスのブラウザから利用可能な、社内向けサンクスカードプラットフォームです。利用者は、AWS Cognitoを利用した認証（メール/パスワードまたはGoogleアカウント）によりシステムにアクセスします。感謝のメッセージを記述したデジタルカードを作成し、他の社員（個人またはチーム）に送信できます。受信したカードは一覧で確認でき、カードに対して「いいね」という形でポイントを付与することができます。利用者は週ごとに一定の「いいね」ポイントを持ち、それを使って感謝の度合いを表現します。

### 3.2. システム全体構成図（概念）
LevLetterは、以下の主要コンポーネントから構成されるWebアプリケーションとして構築されます。

* **フロントエンド (SPA: React):** ユーザーインターフェースを提供。PCおよびスマートフォンのWebブラウザで動作。AWS Cognitoと連携し認証処理の一部を担当。
* **バックエンド (APIサーバー: Node.js):** ビジネスロジックの処理、データアクセスなどを担当。フロントエンドから渡されるJWTを検証し認可を行う。
* **データベース (PostgreSQL):** ユーザー情報（Cognitoから同期またはCognitoのsubを外部キーとして利用）、カード情報、いいね情報、ポイント情報などを永続的に保存。
* **認証サービス (AWS Cognito):** ユーザーディレクトリ、ユーザー認証（メール/パスワード、Google認証）、トークン発行、パスワードリセットなどを担当。

(詳細なアーキテクチャ図は技術設計書で提示します)

## 4. 機能要件

MVP（Minimum Viable Product）として、以下の機能を提供します。認証関連機能はAWS Cognitoの機能を最大限活用します。

### 4.1. ユーザー管理・認証機能 (AWS Cognito利用)

* **4.1.1. ユーザー登録:**
    * Cognitoのサインアップ機能を利用。メールアドレスをユーザー名（サインインID）とする。
    * Google認証を利用した場合は、Googleアカウントの情報（メール、氏名、プロフィール写真等）を基にCognitoユーザープールにユーザーが作成される（属性マッピングによる）。
    * サインアップ時の必須属性は `email`, `name` とする。
* **4.1.2. ログイン・ログアウト:**
    * Cognitoのサインイン機能を利用。メールアドレスとパスワード、またはGoogleアカウントでのサインインを提供。
    * 認証成功後、CognitoはIDトークン、アクセストークン、リフレッシュトークンを発行。フロントエンドはこれらを受領し適切に管理する。
    * ユーザーは手動でログアウトできる（Cognitoのグローバルサインアウトも考慮）。
* **4.1.3. パスワードリセット:**
    * Cognitoが提供するパスワードリセット機能を利用（登録メールアドレスへの確認コード/リンク送信）。
* **4.1.4. ユーザーロール:**
    * **一般ユーザー:** システムの基本機能を利用できる。Cognitoの標準ユーザー。
    * **管理者:** Cognitoユーザー管理コンソールを通じてユーザーの基本情報管理を行う。アプリケーション内での特別な管理者機能はMVPでは最小限とする。Cognitoユーザーグループを利用して管理者権限を付与することも検討。

### 4.2. サンクスカード作成・送信機能
* **4.2.1. カード作成:**
    * 感謝を伝えたい相手（個人またはチーム）を選択できる。
        * 送信先の選択は、ユーザー検索（氏名、部署などでインクリメンタルサーチ）によって行う。
        * チーム宛送信の場合、チーム名で検索・選択できる。
    * 感謝のメッセージを入力できる。メッセージは140文字以内とする。
    * 入力中にリアルタイムで残り文字数を表示する。
* **4.2.2. カード送信:**
    * 作成したカードを送信先に送ることができる。
    * 送信前に確認ステップを設ける（推奨）。
    * 送信が完了したら、ユーザーに完了通知を表示する。
* **4.2.3. 送信フォームの配置:**
    * タイムライン（全社カード一覧画面）の上部に常設の送信フォームを配置する（モーダル表示ではない）。

### 4.3. サンクスカード受信・表示機能
* **4.3.1. カード一覧表示:**
    * 自分が受信したサンクスカードを時系列（新しい順）で一覧表示できる。
    * 「マイカード」セクションで、自分が送信したカードと受信したカードを分けて表示できる。
    * カード一覧には、送信者、メッセージの一部、受信日時、いいね数などを表示する。
* **4.3.2. カード詳細表示:**
    * 一覧からカードを選択すると、メッセージ全文や「いいね」をしたユーザーの一覧などを表示できる。
* **4.3.3. 通知機能 (MVP最小限):**
    * 新しいカードを受信した際に、システム内で簡易的な通知（例：ヘッダーのアイコンにバッジ表示など）を行う。

### 4.4. 「いいね」機能（ポイント機能）
* **4.4.1. 「いいね」の送信:**
    * 受信したサンクスカードやタイムライン上のカードに対して、「いいね」を送ることができる。
    * 「いいね」を送る際、付与するポイント数を0から100ポイントの範囲でスライダーUIなどを用いて選択できる。
    * 自分のカードには「いいね」を送れない。
* **4.4.2. ポイント配布と管理:**
    * 各ユーザーには、毎週月曜日の朝（日本時間）に500ポイントの「いいね」送信可能ポイントが自動的に配布される。
    * 配布されたポイントはその週の終わり（日曜日23:59）に失効し、翌週への持ち越しはできない。
    * ユーザーが「いいね」を送信すると、送信したポイント数だけユーザーの週次送信可能ポイントが減少し、カードの「いいね」獲得ポイントが増加する。
    * 受信者ユーザーの累計獲得ポイントとして、もらった「いいね」のポイントが蓄積される（このポイントは消費・交換などはできない）。
* **4.4.3. 「いいね」情報の表示:**
    * 各カードに、獲得した総「いいね」ポイント数と、「いいね」をしたユーザーの一覧（アイコン＋氏名）を表示する。
    * 自分がそのカードに送った「いいね」ポイント数も表示する。
    * ユーザーは自分のプロフィール画面やヘッダー等で、今週の残り送信可能ポイント数（例：「今週の残り: XXX/500」）を確認できる。
* **4.4.4. 名称・アイコン:**
    * 機能名は「いいね」で統一する。
    * 「いいね」ボタンのアイコンはハートマーク（❤️）を使用する。

### 4.5. タイムライン（全社カードフィード）機能
* **4.5.1. 全社カード一覧表示:**
    * 社内で送受信された（公開設定された）サンクスカードを時系列（新しい順）で一覧表示する。
    * MVPでは、原則として全てのカードがタイムラインに表示される（全社公開）ことを基本とする。将来的に、投稿時の公開範囲設定（例：送信者・受信者のみ、所属部署まで、全社）の導入を検討する。
    * カード一覧には、送信者、受信者（個人またはチーム）、メッセージの一部、いいね数などを表示する。
    * 無限スクロールまたはページネーションにより、過去のカードを閲覧できる。
* **4.5.2. 送信フォームの統合:**
    * タイムライン画面の上部にカード送信フォームを常設する。

### 4.6. ユーザープロフィール・設定機能
* **4.6.1. プロフィール表示:**
    * Cognitoから取得したユーザー情報（表示名、メールアドレスなど）およびアプリケーションDBの情報を表示。
    * 累計で獲得した「いいね」ポイント総数、今週の残り送信可能ポイント数などを表示する。
* **4.6.2. プロフィール編集:**
    * ユーザーは自分の表示名（ニックネーム）を編集できる (Cognitoの`preferred_username`またはアプリケーションDBのカスタムフィールドと連携)。
    * プロフィール画像: Google認証ユーザーはGoogleのプロフィール画像を利用。メール/パスワードユーザーはGravatar連携またはイニシャル表示を基本とする。
* **4.6.3. 通知設定 (MVP最小限):**
    * MVPでは、システム内通知（カード受信、いいね受信）はデフォルトでONとし、個別のON/OFF設定機能は将来検討とする。
* **4.6.4. ログアウト:**
    * ユーザーはシステムからログアウトできる。

### 4.7. 管理者機能 (Cognitoコンソール活用)
* **4.7.1. ユーザー管理:**
    * 主にAWS Cognitoのユーザー管理コンソールを利用して行う。ユーザーの一覧閲覧、アカウントの有効化/無効化、パスワードリセットの強制、グループ割り当てなど。
    * アプリケーション内でのユーザー管理機能はMVPでは最小限とし、Cognitoコンソールでの操作を前提とする。
* **4.7.2. コンテンツ監査 (MVP最小限):**
    * 全ユーザーが送受信したカードの内容を閲覧できる（監査目的）。（将来的な検討事項：不適切投稿の管理機能）
* **4.7.3. システム統計:**
    * MVPでは必須ではない。将来的に、システム全体の利用状況に関する基本的な数値（例：総ユーザー数、期間内のカード送信数など）を閲覧できる簡易的なダッシュボードの導入を検討する。

### 4.8. カード編集・削除機能 (基本方針)
* **4.8.1. 編集機能:** カード投稿者が、投稿後30分以内は編集可能とする。(詳細な表示・通知仕様は別途検討)
* **4.8.2. 削除機能:** カード投稿者本人および管理者が削除可能とする。(詳細なポイント扱い・表示仕様は別途検討)

## 5. 非機能要件

### 5.1. パフォーマンス
* **5.1.1. レスポンスタイム:** 通常利用時において、ユーザーが不便を感じない程度の応答速度であること。具体的な目標値は設定しないが、一般的なWebアプリケーションとしての快適性を目指す。
* **5.1.2. 拡張性:** 将来的なユーザー数増加や機能追加に対応できるよう、システム設計において拡張性を考慮する。

### 5.2. セキュリティ
* **5.2.1. 認証・認可:** AWS Cognitoの機能を利用し、メールアドレスとパスワードによる認証およびGoogle認証を提供する。パスワードはCognito側で安全に管理される。認証されたユーザーのみが、許可された機能・データにアクセスできるよう適切に制御する。
* **5.2.2. 通信の暗号化:** ユーザーのブラウザとサーバー間の全ての通信はHTTPS（TLS）により暗号化する。
* **5.2.3. 脆弱性対策:** OWASP Top 10などを参考に、SQLインジェクション、クロスサイトスクリプティング（XSS）、CSRF（クロスサイトリクエストフォージェリ）などの一般的なWebアプリケーションの脆弱性に対する基本的な対策を講じる。これには、適切な入力バリデーション、出力エンコーディング、セキュアなAPI設計が含まれる。
* **5.2.4. 個人情報保護:** ユーザーの個人情報（メールアドレス、氏名など）は適切に保護し、不正アクセス、改ざん、漏洩を防ぐための措置を講じる。
* **5.2.5. セキュリティレベル:** 通常の社内業務システムとして求められる標準的なセキュリティレベルを確保する。

### 5.3. 可用性
* MVP段階では、高可用性構成（例：サーバーやデータベースの完全冗長化）は必須としない。
* サービス提供はベストエフォートとし、計画的なメンテナンス時間を除き、通常の業務時間帯にサービスが利用可能であることを目指す。
* 障害発生時は、可能な限り速やかな原因究明と復旧作業を行う体制を考慮する（具体的なSLAは設定しない）。

### 5.4. 保守性・運用性
* 将来的な機能修正や追加が容易に行えるよう、コードの可読性、モジュール性を高め、適切なドキュメントを整備する。
* ログ出力機能を実装し、システム稼働状況の監視や障害発生時の原因調査に利用できるようにする。
* 基本的な運用タスク（例：バックアップ、ユーザー問い合わせ対応の一次切り分け）が行えることを考慮する。

### 5.5. UI/UX (ユーザーインターフェース/ユーザーエクスペリエンス)
* **5.5.1. レスポンシブデザイン:** デスクトップPCおよび主要なスマートフォン（iOS, Androidのモダンブラウザ）の画面サイズに最適化された表示と操作性を提供する。
* **5.5.2. 直感性・学習容易性:** ユーザーが特別なトレーニングを受けなくても直感的に操作方法を理解し、容易に利用開始できるシンプルで分かりやすいインターフェースを提供する。
* **5.5.3. 一貫性:** アプリケーション全体でデザイン（配色、フォント、レイアウト等）や操作感に一貫性を持たせる。
* **5.5.4. アクセシビリティ:** （可能な範囲で）基本的なウェブアクセシビリティ標準（例：WCAGの達成基準Aレベルの一部）に配慮し、多くのユーザーが利用しやすい設計を目指す。

### 5.6. データ保持期間
* ユーザー情報、サンクスカード情報、いいね情報などの主要な業務データは、最低1年間はシステム内でアクティブな状態で保持する。
* 1年経過後のデータについては、アーカイブや削除の方針を将来的に定める。当面は全てのデータを保持する方向で検討する。
* 定期的なデータバックアップを実施し、データの損失リスクを低減する。

### 5.7. その他
* **言語:** ユーザーインターフェース、通知メッセージ等は全て日本語とする。
* **ブラウザサポート:** 最新版のGoogle Chrome, Firefox, Safari, Microsoft Edgeをサポート対象とする。Internet Explorerはサポート対象外とする。

## 6. 用語定義

| 用語          | 説明                                                                 |
|---------------|----------------------------------------------------------------------|
| LevLetter     | 本サンクスカードツールの名称。                                                   |
| サンクスカード    | 感謝のメッセージを記述し、送受信するためのデジタルカード。                                   |
| いいね        | サンクスカードに対して送られる称賛や共感のリアクション。本システムではポイントと連動する。                   |
| ポイント        | 「いいね」を送るために使用する、ユーザーに週ごとに配布される仮想的な値。                               |
| MVP           | Minimum Viable Product。実用最小限の製品。本要件定義書で定義する機能範囲。                 |
| タイムライン     | 全社（または所属組織内等、公開範囲に応じた）で送受信されたサンクスカードが時系列で表示されるフィード画面。         |
| 管理者        | ユーザー管理や一部システム設定など、LevLetterの運営に必要な特別な権限を持つユーザー。                  |
| 一般ユーザー    | LevLetterの基本機能（カード送受信、いいねなど）を利用するレバレジーズ株式会社の社員。                      |
| Cognito       | AWSが提供するユーザー認証・管理サービス。本システムで認証基盤として利用。                 |
| IDプロバイダー(IdP)| Googleなど、ユーザー認証情報を提供する外部サービス。                               |
| JWT           | JSON Web Token。Cognitoが認証後に発行するトークン形式。                            |

---
---

# 基本設計書 - LevLetter

**バージョン:** 0.9
**作成日:** 2025年5月15日
**最終更新日:** 2025年5月15日
**作成者:** Gemini (Google AI)
**レビュー者:** (ユーザー名)

## 1. はじめに

### 1.1. 本書の目的
本書は、サンクスカードツール「LevLetter」の基本設計を定義するものです。要件定義書で明確化された要求事項に基づき、システムの機能、画面構成、主要なユーザーフロー、データ構造の概要、認証方式などを記述し、後続の詳細設計および開発作業の基盤とします。

### 1.2. 対象読者
本システムの開発担当者、テスト担当者、プロジェクト関係者を対象とします。

### 1.3. プロジェクト概要
サンクスカードツール「LevLetter」のMVP（Minimum Viable Product）を開発する。認証基盤としてAWS Cognitoを利用し、メール/パスワード認証およびGoogle認証を提供する。

### 1.4. 前提条件
* 本書は、「要件定義書 - LevLetter Ver.1.0.1」の内容を正として作成される。
* カードの編集・削除機能に関する詳細仕様はペンディングであり、本設計書でも該当箇所は仮置きまたは未定として記述する。

## 2. システム構成

### 2.1. システム構成図

```mermaid
graph TD
    subgraph "ユーザーデバイス"
        Browser[Webブラウザ (PC/スマートフォン)]
    end

    subgraph "AWS Cloud"
        Cognito[AWS Cognito <br> (ユーザープール, <br> Google IDP連携)]
        Frontend[フロントエンド (React SPA) <br> (例: Amplify経由でCognitoと連携)]
        APIGateway[API Gateway (オプション)]
        Backend[バックエンドAPI (Node.js on EC2)]
        Database[PostgreSQL on EC2/RDS]
    end

    Browser -- HTTPS --> Frontend
    Browser -- 認証リクエスト/リダイレクト --> Cognito
    Cognito -- 認証結果/トークン --> Frontend
    Frontend -- APIリクエスト (JWT付与) --> APIGateway
    APIGateway -- トークン検証/リクエスト転送 --> Backend
    Backend -- データアクセス --> Database
    Backend -- (必要に応じてCognito UserInfoエンドポイント等アクセス) --> Cognito
詳細:
クライアントサイド (フロントエンド): Reactで構築されたSPA。AWS Amplifyライブラリを利用してCognitoとの認証フロー（サインアップ、サインイン、トークン管理、Googleサインイン連携など）を処理することを推奨。
認証サービス (AWS Cognito):
ユーザープール名: (例: User pool - vaas8 またはユーザー様が設定する実際の名称)
Cognitoドメイン: (ユーザー様がCognitoで設定した実際のドメイン名、例: your-prefix.auth.ap-northeast-1.amazoncognito.com)
アプリクライアント名: LevLetter-WebApp (またはユーザー様が設定した名称)
アプリクライアントID: (ユーザー様がCognitoで取得した実際のクライアントID)
設定済みIDプロバイダー: Cognitoユーザープール (メール/パスワード), Google
認証フロー: Authorization Code Grant with PKCE
コールバックURL (開発時): (例: http://localhost:3000/auth/callback, 及びReplit環境のURL)
サインアウトURL (開発時): (例: http://localhost:3000/login, 及びReplit環境のURL)
サーバーサイド (バックエンド): Node.js (Express.js) で構築されたAPIサーバー。フロントエンドから送信されるJWT（IDトークンまたはアクセストークン）を検証し、APIへのアクセスを認可する。
データベース: PostgreSQL。ユーザー情報はCognitoのsub (ユーザーID) を外部キーとしてアプリケーション固有の情報を保持するか、Cognitoのカスタム属性を一部利用する。
API Gateway (オプション): APIの保護、スロットリング、モニタリングなどのために導入を検討可能。MVPでは必須ではない。
2.2. 技術スタック概要
フロントエンド: React (SPA), AWS Amplify (Cognito連携推奨)
バックエンド: Node.js, Express.js
データベース: PostgreSQL
認証: AWS Cognito (ユーザープール, Google IDP連携)
インフラ: AWS EC2 (またはコンテナサービス), (RDSも検討可)
3. 機能一覧
(要件定義書 Ver.1.0.1 の「4. 機能要件」を基に、より詳細な処理概要を記述。認証関連はCognito利用を前提とする)

機能ID	機能名	概要	主要入力	主要出力	備考（MVP範囲など）
F001A	サインアップ (メール/パスワード)	Cognito Hosted UIまたはAmplify経由でメール、パスワード、必須属性を入力し登録。Cognitoが確認メール送信。	メール, パスワード, 氏名など	確認コード要求、登録成功/失敗	MVP
F001B	サインアップ (Google)	Cognito Hosted UIまたはAmplify経由でGoogle認証。成功時、属性マッピングに基づきCognitoにユーザー作成。	(Googleアカウント情報)	登録成功/失敗	MVP
F002A	サインイン (メール/パスワード)	Cognito Hosted UIまたはAmplify経由でメール、パスワードで認証。	メール, パスワード	JWT (ID, Access, Refreshトークン)	MVP
F002B	サインイン (Google)	Cognito Hosted UIまたはAmplify経由でGoogleアカウントで認証。	(Googleアカウント選択)	JWT (ID, Access, Refreshトークン)	MVP
F003	ログアウト	Cognitoからグローバルサインアウト。ローカルトークンもクリア。	-	ログアウト完了、サインアウトURLへリダイレクト	MVP
F004	パスワードリセット	Cognitoのパスワードリセットフローを利用。	メールアドレス	確認コード、パスワード再設定画面	MVP
F005	カード作成	サンクスカードを作成する。送信先(ユーザー/チーム)、メッセージ(140字以内)を入力。	送信先ID(ユーザー/チーム), メッセージ	作成されたカードデータ(未送信状態)	MVP
F006	カード送信	作成したサンクスカードを送信する。DBにカード情報、受信者情報を保存。送信者のポイントを減算。	カードデータ	送信完了通知、送信済みカードデータ	MVP
F007	カード一覧表示 (マイカード)	自分が受信したカード、送信したカードを時系列で一覧表示する。各カードの概要(送信者/受信者、メッセージ一部、いいね数)を表示。	(なし)	カード一覧データ	MVP
F008	カード詳細表示	特定のカードの詳細情報を表示する。メッセージ全文、送信者、受信者、いいねしたユーザー一覧、総いいね数を表示。	カードID	カード詳細データ	MVP
F009	「いいね」送信	カードに対して「いいね」（ポイント）を送信する。送信者の週次ポイントを減算し、カードのいいね数を加算。DBにいいね情報を記録。	カードID, ポイント数(0-100)	更新されたカードのいいね情報、送信者の残ポイント	MVP
F010	ポイント管理	週次(月曜朝)で全ユーザーの送信可能ポイントを500にリセット。	(システム内部処理)	(なし)	MVP
F011	タイムライン表示	全社(または公開範囲内)のカードを時系列で一覧表示。カード送信フォームを上部に表示。	(フィルター条件 - 将来)	カード一覧データ	MVP
F012	プロフィール表示	自身のプロフィール情報(Cognito情報+アプリ情報)、累計獲得いいね数、週次残いいね数を表示。	(なし)	プロフィール情報	MVP
F013	プロフィール編集 (表示名)	自身の表示名(ニックネーム)を編集し保存する。	新しい表示名	更新成功/失敗通知	MVP
F014	管理者機能概要	主にAWS Cognitoコンソールでのユーザー管理を想定。アプリ内管理機能はMVPでは最小限。	-	-	MVP
F018	カード編集 (投稿者)	(詳細は別途検討) 投稿後30分以内。メッセージテキスト等を編集可能とする。編集履歴はMVPでは保持しない想定。	カードID, 編集後データ	更新成功/失敗通知	MVP (詳細別途)
F019	カード削除 (投稿者)	(詳細は別途検討) 投稿者本人が自身のカードを削除。関連いいねも消滅(ポイント返還なし)。	カードID	削除成功/失敗通知	MVP (詳細別途)
F020	カード削除 (管理者)	(詳細は別途検討) 管理者が任意のカードを削除(監査目的)。関連いいねも消滅。削除理由は別途運用で記録。	カードID	削除成功/失敗通知	MVP (詳細別途)

Google スプレッドシートにエクスポート
4. 画面一覧と画面構成案
4.1. 画面一覧
画面ID	画面名	概要	主な機能ID	備考 (PC/Mobile共通かなど)
S001	ランディングページ (LP)	サービス紹介、ログイン/登録への導線	-	PC/Mobile
S002	ログイン画面	メールアドレスとパスワードでログイン、Googleサインインボタン。Cognito Hosted UI利用も検討。	F002A, F002B	PC/Mobile
S003	パスワードリセット要求画面	パスワードリセット用のメール送信を要求。Cognito Hosted UI利用も検討。	F004	PC/Mobile
S004	パスワードリセット実行画面	新しいパスワードを設定。Cognito Hosted UI利用も検討。	F004	PC/Mobile
S005	タイムライン画面（メイン画面）	全社カード一覧表示、カード送信フォーム	F005,F006,F011	PC/Mobile
S006	マイカード画面（受信/送信一覧）	自分が受信/送信したカードの一覧	F007	PC/Mobile (タブ切替)
S007	カード詳細表示モーダル/画面	カードの詳細情報を表示	F008,F009	PC/Mobile
S008	プロフィール設定画面	自身のプロフィール表示・編集、ログアウト	F012,F013,F003	PC/Mobile
S009	（PC版）ユーザードロップダウンメニュー	ヘッダーのユーザーアイコンクリックで表示されるメニュー（プロフ設定、ログアウト等）	F012,F003	PCのみ
S010	（管理者）ユーザー管理画面	(MVPではCognitoコンソール利用を主とし、アプリ内機能は最小限またはなし)	F014	PC (想定)
S012	(カード編集画面/モーダル)	(詳細は別途検討)	F018	PC/Mobile

Google スプレッドシートにエクスポート
4.2. 主要画面構成案 (ワイヤーフレーム/モックアップ情報整理)
(このセクションでは、会話ログで作成された各画面のモックアップ情報をテキストベースで整理・記述します。各画面の主要なコンポーネント、レイアウト、インタラクションについて触れます。)

4.2.1. S001: ランディングページ (LP)
ヘッダー: LevLetterロゴ, ナビゲーション(機能, 効果, お問い合わせ等), ログインボタン
ヒーローセクション: キャッチコピー「感謝を可視化し、チームワークを最大化」, サービス価値提案, CTAボタン(今すぐ始める/デモを見る), サービスモックアップ画像
主な機能紹介セクション: カード送信, いいね機能, 統計・分析機能(将来)などをアイコンと短い説明で紹介
導入効果セクション: (例: 92%のチーム満足度向上など、具体的な数値を提示)
使い方セクション: (例: 3ステップで簡単スタートなどを図解)
顧客の声セクション: (導入企業のコメントなど)
CTAセクション: (再度、無料トライアルや登録を促す)
フッター: お問い合わせ情報, サポートページリンク, コピーライト
4.2.2. S002: ログイン画面
Cognito Hosted UIを利用する場合:
Cognitoが提供する標準的なログイン画面。
メールアドレス入力欄、パスワード入力欄、「ログイン」ボタン。
「Googleでサインイン」ボタン。
「アカウント登録はこちら」(サインアップへの導線) リンク。
「パスワードをお忘れですか？」(パスワードリセットへの導線) リンク。
独自UIを実装する場合 (AWS Amplify等を利用):
LevLetterロゴ。
メールアドレス入力フィールド。
パスワード入力フィールド。
「ログイン」ボタン。
「Googleでサインイン」ボタン。
サインアップページへのリンク。
パスワードリセットページへのリンク。
4.2.3. S005: タイムライン画面（メイン画面）- デスクトップ版
ヘッダー: LevLetterロゴ、(右側)ユーザーアイコン（クリックでS009 ユーザードロップダウンメニュー表示）
サイドバー (左側):
個人統計表示 (今月もらったいいね、今週の残りいいね、累計いいね)
ナビゲーションタブ (「みんなのカード」 / 「マイカード」)
メインエリア (中央):
カード送信フォーム (上部):
送信先選択 (個人/チーム、ユーザー名/チーム名でのインクリメンタルサーチ)
メッセージ入力 (140字以内、リアルタイム文字数カウンター)
「いいね」ポイント数選択スライダー (0-100)
送信ボタン
(自分の今週の残り送信可能「いいね」ポイント表示)
カード一覧 (下部):
時系列表示 (新しい順)。無限スクロールまたはページネーション。
各カード表示内容:
送信者: アイコン、氏名、部署
矢印 (→)
受信者: アイコン、氏名、部署 (個人宛の場合) / チーム名、主要メンバーアイコン数名 +「+N人」(チーム宛の場合)
メッセージ本文 (数行プレビュー、クリックで詳細表示 S007)
いいねアイコン (❤️) と総ポイント数
いいねした人のアバター一覧 (一部表示、クリックで全表示)
投稿日時 (例: